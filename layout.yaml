# layout.yaml

---

# rules for layout, appearance, computed, shortcuts:
#
#     - name:
#       - no self. prefix
#       - use shortcut name rather than expanded name
#     - in exp:
#       - don't use self. prefixes 
#       - use child.attr to lookup an attr in child after it's created, and child__attr to get a
#         copy of the value sent to the child ctor
#       - can use shortcut names


# layout:
#     layout defines argument defaults for layout arguments.  These are only passed to __init__ and
#     never change.  The defaults end up as parameter defaults, so must be legal in that context.
#
#     width and height are used.
#
# appearance:
#     appearance defines argument defaults for appearance arguments.  These are passed to both
#     __init__ and draw, so may change (by draw).
#     The defaults end up as parameter defaults, so must be legal in that context.
#
# shortcuts:
#     defines shortcut names that are used for parameter names to make it easier for callers to set
#     important parameters.
#
# for drawing:
#     width and height are used.
#
# for touch:
#     touch_width and touch_height are used.  They default to width and height.

module: shapes

import:
    - import math
    - import os.path
    - from operator import attrgetter
    - from pyray import *
    - import screen
    - from alignment import half
    - import sprite

include: |
    Fonts = []   # Serif, Serif-Bold, Sans, Sans-Bold
    Font_names = []

    @screen.register_init
    def init_fonts(screen_obj):
        # This must run _after_ init_window is called!

        global Fonts, Font_names
        # Load Fonts:
        for name in 'Serif', 'Sans':
            for bold in False, True:
                font_name = "DejaVu" + name
                if bold:
                    font_name += '-Bold'
                path = os.path.join(screen.Font_dir, font_name + ".ttf")
                Font_names.append(font_name)
                font = load_font(path)
                #print(f"{font=}, {is_font_valid(font)=}")
                Fonts.append(font)

    class as_dict(dict):
        def __init__(self, attrs):
            self.attrs = attrs

        def __getitem__(self, key):
            try:
                return getattr(self.attrs, key)
            except AttributeError:
                raise KeyError(key)

    class gap:
        def __init__(self, name="a gap", height=0, width=0):
            self.name = name
            self.height = height
            self.width = width

        def draw(self, x_pos=None, y_pos=None):
            pass

    class vgap(gap):
        def __init__(self, margin, name="a vgap"):
            super().__init__(name, height=margin)

        def __repr__(self):
            return f"<vgap({self.name})={self.height}>"

    class hgap(gap):
        def __init__(self, margin, name="an hgap"):
            super().__init__(name, width=margin)

        def __repr__(self):
            return f"<hgap({self.name})={self.width}>"

widget_stubs:
    vgap:
        layout: [margin]
    hgap:
        layout: [margin]

add_to_all: [Fonts, Font_names, vgap, hgap]


static_text:

    trace:
        - variable.init
        - translate_name
        - translate_exp
        - show_shortcuts
        - show_layout
        - show_appearance
        - show_computed_init
        - show_computed_draw
        - show_init_params
        - show_init_available
        - show_draw_params
        - show_draw_available
        - show_draw_computable
        - method__init__dump

    raylib_call:
        name: draw_text_ex
        args: [font, str(text), (x_left.i, y_top.i), size, spacing, color]
    layout:
        size: 20
        spacing: 0
        sans: false
        bold: false
        text: null
    appearance:
        color: BLACK
    computed:
        init:
            font: Fonts[2 * sans + bold]
            msize: measure_text_ex(font, str(text), size, spacing)
            width: int(math.ceil(msize.x))
            height: int(math.ceil(msize.y))

dynamic_text:
    raylib_call:
        name: draw_text_ex
        args: [font, str(text), (x_left.i, y_top.i), size, spacing, color]
    layout:
        size: 20
        spacing: 0
        sans: false
        bold: false
        max_text: null
        all_texts: null      # iterable of all possible values to display (will be converted to str)
        as_sprite: true
    appearance:
        color: BLACK
        text: null
    computed:
        init:
            font: Fonts[2 * sans + bold]
            msize: |
              measure_text_ex(font, str(max_text), size, spacing) if max_text is not None \
              else max((measure_text_ex(font, str(v), size, spacing) for v in all_texts),
                       key=attrgetter('x'))
            width: int(math.ceil(msize.x))
            height: int(math.ceil(msize.y))
        draw:
            draw_msize: measure_text_ex(font, text, size, spacing)
            draw_width: int(math.ceil(draw_msize.x))
            draw_height: int(math.ceil(draw_msize.y))
            x_left: x_pos.C(width).S(draw_width)
    include:
        init_end: |
            if self.as_sprite:
                self.sprite = sprite.Sprite(self.width, self.height, trace=self.trace)
        draw_before: |
            if self.as_sprite:
                self.sprite.save_pos(self.x_pos, self.y_pos)
        clear: |
            if self.as_sprite:
                self.sprite.reset()

rect:
    raylib_call:
        name: draw_rectangle

        # nice if width and height are odd, gives integer center
        args: [x_left.i, y_top.i, width, height, color]
    layout:
        width: null
        height: null
        label: null                 # static_text over the button, pass a static_text object
        label_wmargin: 2
        label_hmargin: 2
        touch: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        color: WHITE
    computed:
        init:
            width: self.label.width + 2*self.label_wmargin
            height: self.label.height + 2*self.label_hmargin
    include:
        init_end: |
            if self.label is not None:
                if self.width is None:
                    self.width = self.label.width + 2 * self.label_wmargin
                if self.height is None:
                    self.height = self.label.height + 2 * self.label_hmargin
            if self.touch is not None:
                self.touch.attach_widget(self)
        draw_end: |
            if self.label is not None:
                self.label.draw(self.x_pos.C(draw_width), self.y_pos.C(draw_height))
            if self.touch is not None:
                self.touch.activate()
        clear: |
            if self.touch is not None:
                self.touch.deactivate()

circle:
    raylib_call:
        name: draw_circle
        args: [x_center.i, y_middle.i, radius, color]
    layout:
        diameter: 31  # nice if this is odd, gives integer radius

        # used by touch_buttons:
        min_touch_radius: 22        # ok even or odd, extends 7 beyond default diameter
        #min_touch_diameter: 43
        label: null                 # static_text over the button, pass a static_text object
        label_margin: 2
        touch: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        color: WHITE
    computed:
        init:
            # adj_dia is max(diameter, computed label diameter)
            adj_dia: |
                (diameter if label is None
                          else max(diameter,
                                   math.ceil(math.hypot(self.label.width, self.label.height)
                                               + 2*self.label_margin) | 1))  # force odd
            radius: half(adj_dia)
            width: adj_dia
            height: adj_dia
            touch_radius: max(radius, min_touch_radius)
    include:
        init_end: |
            if self.touch is not None:
                self.touch.attach_widget(self)
        draw_end: |
            if self.label is not None:
                self.label.draw(self.x_pos.C(draw_width), self.y_pos.C(draw_height))
            if self.touch is not None:
                self.touch.activate()
        clear: |
            if self.touch is not None:
                self.touch.deactivate()

---

module: containers

import:
    - from pyray import *
    - from shapes import *

bordered_circle:
    stacked:
        elements:
            - border: circle
            - inner: circle
    layout:
        diameter: 31
        border_width: 2             # or, maybe, 3 -- ok even or odd
        label: null                 # static_text over the button, pass a static_text object
        label_margin: 2
        touch: null
    appearance:
        border__color: BLACK
        color: WHITE
        on_color: GREEN
        off_color: GRAY
    shortcuts:
       #diameter: border__diameter  # nice if this is odd, gives integer radius
        color: inner__color
        on_color: inner__on_color
        off_color: inner__off_color
        label: inner__label
        label_margin: inner__label_margin
        touch: inner__touch
    computed:
        init:
            inner__diameter: diameter - 2*border_width
            border__diameter: |
                (diameter if label is None
                          else max(diameter, inner.adj_dia + 2*border_width))

bordered_rect:
    stacked:
        elements:
            - border: rect
            - background: rect
    layout:
        border_width: 4           # width of outer border line
        width: null               # of border rect, if null, calced by background__width + border_width
        height: null              # of border rect, if null, calced by background__height + border_width
        background__width: null   # if null: calced by label, or width - border_width
        background__height: null  # if null: calced by label, or height - border_width
        label: null               # static_text over the button, pass a static_text object
        label_wmargin: 2
        label_hmargin: 2
        touch: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: WHITE
    shortcuts:
        width: border__width
        height: border__height
        color: background__color
        label: background__label
        label_wmargin: background__wmargin
        label_hmargin: background__hmargin
        touch: background__touch
        on_color: background__on_color
        off_color: background__off_color
    computed:
        init:
            border__width: background.width + 2*border_width    # only calced if width is None
            border__height: background.height + 2*border_width  # only calced if height is None
    include:
        init_background: |
            if background__width is not None:
                width = background__width + 2*border_width
            elif width is not None:
                self.background__width = width - 2*border_width
            if background__height is not None:
                height = background__height + 2*border_width
            elif height is not None:
                self.background__height = height - 2*border_width

    # NNNNYYYY | label is None
    # NNYYNNYY | background__width is None
    # NYNYNYNY | width is None
    # ----------------------------------
    # X   X  X | error
    #  X X X   | width = background.width + 2*border_width
    #   X   X  | background__width = width - 2*border_width 

    # -N-YY | label is None
    # N-YNY | background__width is None
    # NYNYY | width is None
    # ----------------------------------
    # X   X | error
    #  X X  | create background; width = background.width + 2*border_width; create border
    #   X   | background__width = width - 2*border_width; create background; create border

titled:
    trace:
        - show_init_params
        - show_draw_params
    column:
        elements:
            - title_text: static_text
            - middle: vgap
            - body: placeholder
    layout:
        title: '"title"'
        middle__margin: 2  # between title and body
    shortcuts:
        title: title_text__text

boxed:
    stacked:
        elements:
            - border: bordered_rect
            - body: placeholder     # body is centered in border
    layout:
        border_width: 4             # width of outer border line
        horz_margin: 5              # between body and left/right edge of border
        vert_margin: 5              # between body and top/bottom edge of border
    appearance:
        border_color: BLACK
        color: WHITE
    shortcuts:
        border_width: border__border_width
        border_color: border__border_color
        color: border__color        # background (fill) color
        label: border__label
        label_wmargin: border__wmargin
        label_hmargin: border__hmargin
        touch: border__touch
        on_color: border__on_color
        off_color: border__off_color
    computed:
        init:
            border__background__width: body__width + 2*horz_margin
            border__background__height: body__height + 2*vert_margin

boxed_titled:
    trace:
        - show_init_params
        - create_widget_args
    specializes: boxed
    placeholders:
        body:
            - body_titled: titled
    layout:
        title: '"title"'
        placeholders: null

        # boxed arguments:
        border_width: 4
        horz_margin: 5           # between body and left/right edge of border
        vert_margin: 5           # between body and top edge of border

        # titled arguments:
        middle_margin: 1
    appearance:
        border_color: BLACK
        color: WHITE
    shortcuts:
        title: body_titled__title
        placeholders: body_titled__placeholders
        middle_margin: body_titled__middle__margin

---

module: slider

import:
    - import math
    - from pyray import *
    - from alignment import half
    - from shapes import *
    - from containers import *
    - import sprite
    - from touch import touch_slider


slider_vknob:
    stacked:
        elements:
            - wide_rect: rect
            - narrow_rect: rect
    layout:
        as_sprite: true
    appearance:
        wide_rect__color: BLACK
        narrow_rect__color: GRAY
    computed:
        init:
            wide_rect__width: 49
            wide_rect__height: 19
            narrow_rect__width: 61
            narrow_rect__height: 5
    include:
        init_end: |
            self.sprite = sprite.Sprite(self.width, self.height, trace=self.trace)
        draw_before: |
            self.sprite.save_pos(self.x_pos, self.y_pos)
        clear: |
            self.sprite.reset()

slider_touch:
    stacked:
        elements:
            - centerline: rect
            - knob: slider_vknob
    layout:
        low_value: 0
        high_value: 127
        starting_value: 0
        tick: 3  # width of a "tick", or the number of pixels separating one value from the next
                 # make this 10 to be able to easily select between neighboring values.
        centerline__width: 3
        touch: null
        scale_fn: id
    appearance:
        centerline__color: BLACK
    computed:
        init:
            num_values: (high_value - low_value) + 1
            slide_height: (num_values - 1) * tick
            centerline__height: slide_height + knob.height - 1
    include:
        init_end: self.touch.attach_widget(self)
        draw_end: |
            y_top = y_pos.S(self.height)
            y_bottom = y_pos.E(self.height)

            # knob Y_pos at high_value
            self.slide_y_top_C = (y_top + half(self.knob.height)).as_C()

            # knob Y_pos at low_value
            self.slide_y_bottom_C = (y_bottom - half(self.knob.height)).as_C()

            self.touch.activate()
        clear: self.touch.deactivate()

slider:
    trace:
        - variable.init
        - translate_name
        - translate_exp
        - show_shortcuts
        - show_layout
        - show_appearance
        - show_computed_init
        - show_init_params
        - show_init_available
        - method__init__dump
    specializes: boxed_titled
    placeholders:
        body:
            - display: dynamic_text
            - slider_gap: vgap
            - slider: slider_touch
    layout:
        title: null
        low_value: 0
        high_value: 127
        starting_value: 0
        tick: 3  # number of pixels separating one value from the next
        scale_fn: id
        slider_gap__margin: 5
        command: null

        # boxed_titled arguments:
        border_width: 4
        horz_margin: 5           # between body and left/right edge of border
        vert_margin: 5           # between body and top/bottom edge of border

        # titled arguments:
        middle_margin: 1
    shortcuts:
        low_value: slider__low_value
        high_value: slider__high_value
        starting_value: slider__starting_value
        tick: slider__tick
        scale_fn: slider__scale_fn
    computed:
        init:
            display__all_texts: map(scale_fn, range(low_value, high_value + 1))
            display__text: str(scale_fn(low_value))
            slider__touch: touch_slider(name, display, command)

---

module: buttons

import:
    - from pyray import *
    - from shapes import *
    - from containers import *
    - from touch import *
    - from commands import *

add_to_all: [radio_control]


toggle_circle:
    specializes: bordered_circle
    layout:
        diameter: 31
        border_width: 2          # or, maybe, 3 -- ok even or odd
        label: null              # static_text over the button, pass a static_text object
        label_margin: 2
        command: null
    appearance:
        border__color: BLACK
        on_color: GREEN
        off_color: GRAY
    computed:
        init:
            touch: circle_toggle(name, command, trace=trace)

one_shot_circle:
    specializes: bordered_circle
    layout:
        diameter: 31
        border_width: 2          # or, maybe, 3 -- ok even or odd
        label: null              # static_text over the button, pass a static_text object
        label_margin: 2
        command: null
        blink_time: 0.3
    appearance:
        border__color: BLACK
        on_color: GREEN
        off_color: GRAY
    computed:
        init:
            touch: circle_one_shot(name, command, blink_time, trace)

start_stop_circle:
    specializes: bordered_circle
    layout:
        diameter: 31
        border_width: 2          # or, maybe, 3 -- ok even or odd
        label: null              # static_text over the button, pass a static_text object
        label_margin: 2
        command: null
    appearance:
        border__color: BLACK
        on_color: GREEN
        off_color: GRAY
    computed:
        init:
            touch: circle_start_stop(name, command, trace)

radio_circle:
    specializes: bordered_circle
    layout:
        diameter: 31
        border_width: 2          # or, maybe, 3 -- ok even or odd
        label: null              # static_text over the button, pass a static_text object
        label_margin: 2
        command: null
        radio_control: null      # may not be null, pass same radio_control() to all buttons in group
    appearance:
        border__color: BLACK
        on_color: GREEN
        off_color: GRAY
    computed:
        init:
            touch: circle_radio(name, command, radio_control, trace)

toggle_rect:
    specializes: bordered_rect
    layout:
        border_width: 2          # width of outer border line
        width: null              # of border rect, if null, calced by background__width + border_width
        height: null             # of border rect, if null, calced by background__height + border_width
        text: null               # label over the button
        label_wmargin: 2
        label_hmargin: 2
        command: null
        split: False       # if True, left half of button acts like start-stop, right half toggle

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: GRAY
    computed:
        init:
            label: static_text(text=text)
            touch: rect_toggle(name, command, split, trace)

one_shot_rect:
    specializes: bordered_rect
    layout:
        border_width: 2          # width of outer border line
        width: null              # of border rect, if null, calced by background__width + border_width
        height: null             # of border rect, if null, calced by background__height + border_width
        text: null               # label over the button
        label_wmargin: 2
        label_hmargin: 2
        command: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: GRAY
    computed:
        init:
            label: static_text(text=text)
            touch: rect_one_shot(name, command, trace=trace)

start_stop_rect:
    specializes: bordered_rect
    layout:
        border_width: 2          # width of outer border line
        width: null              # of border rect, if null, calced by background__width + border_width
        height: null             # of border rect, if null, calced by background__height + border_width
        text: null               # label over the button
        label_wmargin: 2
        label_hmargin: 2
        command: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: GRAY
    computed:
        init:
            label: static_text(text=text)
            touch: rect_start_stop(name, command, trace)

radio_rect:
    specializes: bordered_rect
    layout:
        border_width: 2          # width of outer border line
        width: null              # of border rect, if null, calced by background__width + border_width
        height: null             # of border rect, if null, calced by background__height + border_width
        text: null               # label over the button
        label_wmargin: 2
        label_hmargin: 2
        command: null
        radio_control: null     # may not be null, pass same radio_control() to all buttons in group

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: GRAY
    computed:
        init:
            label: static_text(text=text)
            touch: rect_radio(name, command, radio_control, trace)

cycle_rect:
    specializes: bordered_rect
    layout:
        border_width: 2          # width of outer border line
        width: null              # of border rect, if null, calced by background__width + border_width
        height: null             # of border rect, if null, calced by background__height + border_width
        label_wmargin: 2
        label_hmargin: 2
        choices: null
        cc_channel: null
        cc_param: null

        # used by touch_buttons:
        on_color: GREEN    # suggest: RED, GREEN, BLUE
        off_color: GRAY    # suggest: GRAY, DARKGRAY, BROWN, BLACK
    appearance:
        border__color: BLACK
        color: GRAY
    computed:
        init:
            command: Cycle(choices, cc_channel, cc_param)
            label: dynamic_text(all_texts=choices, text=str(choices[0]), as_sprite=False)
            touch: rect_one_shot(name, command, trace=trace)

---

module: song_position

import:
    - from pyray import *
    - from alignment import *
    - from shapes import *
    - from containers import *
    - from buttons import *
    - from commands import *
    - from midi_io import *
    - from spp_helpers import set_spp_display, update_spp_display

spp_text:
    specializes: dynamic_text
    layout:
        max_text: '"888-8.8"'
    appearance:
        color: BLACK
        text: '"1.1"'

start_button:
    specializes: one_shot_circle
    computed:
        init:
            label: static_text(text="Start")
            command: Start()

stop_button:
    specializes: one_shot_circle
    layout:
        diameter: 31
    computed:
        init:
            label: static_text(text="Stop")
            command: Stop()

cont_button:
    specializes: one_shot_circle
    layout:
        diameter: 31
    computed:
        init:
            label: static_text(text="Cont.")
            command: Continue_()

spp_start_stop_col:
    column:
        elements:
            - spp: spp_text
            - gap0: vgap
            - start: start_button
            - gap1: vgap
            - stop: stop_button
            - gap2: vgap
            - cont: cont_button
    layout:
        gap0__margin: 7
        gap1__margin: 7
        gap2__margin: 7
    computed:
        init:
            stop__diameter: start.border__diameter
            cont__diameter: start.border__diameter
    include:
        init_end: |
            set_spp_display(self.spp)
            notify_location_fn(update_spp_display)

spp_start_stop:
    specializes: boxed
    placeholders:
        body:
            - contents: spp_start_stop_col

spp_replay_mark:
    column:
        elements:
            - mark_spp: spp_text
            - gap0: vgap
            - mark: one_shot_rect
            - gap1: vgap
            - replay: one_shot_circle
            - gap2: vgap
            - mark_end: cycle_rect
            - gap3: vgap
            - plus: one_shot_circle
    layout:
        gap0__margin: 3
        gap1__margin: 6
        gap2__margin: 4
        gap3__margin: 5
        multiplier: null
    computed:
        init:
            mark_spp__text: '"1.1"'
            mark__text: '"Mark"'
            mark__command: SaveSpp(mark_spp, multiplier.background__touch.command)
            replay__label: static_text(text="Replay")
            replay__command: Replay()
            mark_end__choices: [Mark, End]
            plus__label: static_text(text="+", size=30)
            plus__label_margin: 0
            plus__command: IncSpp(1)

spp_replay_end:
    column:
        elements:
            - end_spp: spp_text
            - gap0: vgap
            - end: one_shot_rect
            - gap1: vgap
            - loop: one_shot_circle
            - gap2: vgap
            - multiplier: cycle_rect
            - gap3: vgap
            - minus: one_shot_circle
    layout:
        loop__diameter: 71
        gap0__margin: 3
        gap1__margin: 6
        gap2__margin: 4
        gap3__margin: 5
    computed:
        init:
            end_spp__text: '"1.1"'
            end__text: '"End"'
            end__command: SaveSpp(end_spp, multiplier.background__touch.command)
            loop__label: static_text(text="Loop")
            loop__command: Loop()
            multiplier__choices: [100, 10, 1, .1]
            minus__label: static_text(text="-", size=30)
            minus__label_margin: 0
            minus__diameter: 43
            minus__command: IncSpp(-1)

spp_replay_guts:
    row:
        elements:
            - mark_col: spp_replay_mark
            - gap: hgap
            - end_col: spp_replay_end
    layout:
        y_align: '"S"'
        gap__margin: 10
    computed:
        init:
            mark_col__multiplier: end_col.multiplier
    include:
        init_end: |
            self.mark_col.plus__command.args(self.mark_col.mark_end.background__touch.command,
                                             self.mark_col.mark__command,
                                             self.end_col.end__command)
            self.end_col.minus__command.args(self.mark_col.mark_end.background__touch.command,
                                             self.mark_col.mark__command,
                                             self.end_col.end__command)
            self.mark_col.replay__command.args(self.mark_col.mark__command,
                                               self.end_col.end__command)
            self.end_col.loop__command.args(self.mark_col.mark__command,
                                            self.end_col.end__command)

spp_replay:
    specializes: boxed
    placeholders:
        body:
            - guts: spp_replay_guts
    layout:
        horz_margin: 10             # between body and left/right edge of border
        vert_margin: 5              # between body and top/bottom edge of border

---

module: controls

import:
    - from pyray import *
    - from alignment import *
    - from scale_fns import *
    - from shapes import *
    - from slider import *
    - from containers import *
    - from buttons import *
    - from song_position import *
    - from commands import *
    - from midi_io import *

transpose:   # width=107, height=322
    specializes: slider
    layout:
        title: '"Transpose"'
        high_value: 24
        starting_value: 12
        scale_fn: Transpose_scale.scale_rounded      # [-12:12]
        tick: 10
    computed:
        init:
            command: ControlChange(1, 0x56)
    include:
        init_end: |
            set_transpose(ans.body_titled.slider.touch)

tempo:   # width=79, height=463
    specializes: slider
    layout:
        title: '"Tempo"'
        starting_value: 65
    computed:
        init:
            scale_fn: Tempo_scale.scale_rounded      # [30, 200]
            command: SystemCommon(0xF4)
    include:
        init_end: |
            set_tempo(ans.body_titled.slider.touch)

channel_volume:   # width=82, height=463
    specializes: slider
    layout:
        title: '"Volume"'
        starting_value: 45
        scale_fn: id
    computed:
        init:
            command: ControlChange(1, 0x07, multiplier=127, send_msb_lsb=True)   # MSB and LSB
           #command: ControlChange(1, 0x07)   # MSB
           #command: ControlChange(1, 0x27)   # LSB

channel:         # width=88, height=232
    specializes: slider
    layout:
        title: '"Channel"'
        high_value: 15
        tick: 10
    computed:
        init:
            scale_fn: Channel_scale.scale_rounded
            command: ControlChange(1, 0x55)
    include:
        init_end: |
            set_channel(ans.body_titled.slider.touch)   # Player channel

note_channel:    # width=??, height=??
    specializes: slider
    layout:
        title: '"Channel"'
        high_value: 16
        tick: 10
        cc_channel: None
        cc_param: None
    computed:
        init:
            scale_fn: Note_channel_scale
            command: ControlChange(cc_channel, cc_param)

duration:
    specializes: slider
    layout:
        title: '"Duration"'
        starting_value: 63
        scale_fn: Duration_scale.scale_rounded         # [-0.75:0.76]
        cc_channel: None
        cc_param: None
    computed:
        init:
            command: ControlChange(cc_channel, cc_param)

grace_duration:
    specializes: slider
    layout:
        title: '"Duration"'
        starting_value: 13
        scale_fn: Grace_duration_scale.scale_rounded   # [3:150]
        cc_channel: None
        cc_param: None
    computed:
        init:
            command: ControlChange(cc_channel, cc_param)

velocity:
    specializes: slider
    layout:
        title: '"Velocity"'
        starting_value: 42
        scale_fn: Velocity_scale.scale_rounded         # [-50:100]
        cc_channel: None
        cc_param: None
    computed:
        init:
            command: ControlChange(cc_channel, cc_param)

default_velocity:
    specializes: slider
    layout:
        title: '"Dynamics"'
        starting_value: 43
        scale_fn: id
    computed:
        init:
            command: ControlChange(1, 0x57)

sustain_pedal:          # width=72, height=28
    specializes: toggle_rect
    layout:
        width: 93           # of border rect, if null, calced by background__width + border_width
        height: null        # of border rect, if null, calced by background__height + border_width
        text: '"Sustain"'
        split: true
    computed:
        init:
            command: ControlChange(1, 0x40, 127)

sostenuto_pedal:        # width=93, height=28
    specializes: toggle_rect
    layout:
        text: '"Sostenuto"'
        split: true
    computed:
        init:
            command: ControlChange(1, 0x42, 127)

soft_pedal:             # width=43, height=28
    specializes: toggle_rect
    layout:
        width: 93           # of border rect, if null, calced by background__width + border_width
        height: null        # of border rect, if null, calced by background__height + border_width
        text: '"Soft"'
        split: true
    computed:
        init:
            command: ControlChange(1, 0x43, 127)

pedal_col:
    column:
        elements:
            - gap0: vgap
            - sustain: sustain_pedal
            - gap1: vgap
            - sostenuto: sostenuto_pedal
            - gap2: vgap
            - soft: soft_pedal
    layout:
        gap0__margin: 51
        gap1__margin: 36
        gap2__margin: 36

spp_pedal_row:
    row:
        elements:
            - spp: spp_start_stop
            - gap: hgap
            - pedals: pedal_col
    layout:
        y_align: '"S"'
        margin: 5
    shortcuts:
        margin: gap__margin

spp_pedal_replay_col:
    column:
        elements:
            - spp_pedals: spp_pedal_row
            - gap: vgap
            - replay: spp_replay
    layout:
        gap__margin: 5




player_guts:
    row:
        elements:
            - ch_spp_replay: spp_pedal_replay_col
            - gap1: hgap
            - tempo_slider: tempo
            - gap2: hgap
            - dynamics: default_velocity
    layout:
        y_align: '"S"'
        gap1__margin: 5
        gap2__margin: 5

player_top_row:
    row:
        elements:
            - gap0: hgap
            - quit: one_shot_rect
            - gap1: hgap
            - title: static_text
            - gap2: hgap
            - songs: cycle_rect
            - gap3: hgap
            - select: one_shot_rect
            - gap4: hgap
    layout:
        gap0__margin: 0
        quit__text: '"Quit"'
        gap1__margin: 18
        title__text: '"Player:"'
        gap2__margin: 4
        gap3__margin: 8
        select__text: '"Select"'
        gap4__margin: 4
    computed:
        init:
            quit__command: Quit()
            select__command: SongSelect(songs.background__touch.command)
            songs__choices:
                - Gladiolus Rag
                - La Campanella
                - Weeping Willow

player_full:
    column:
        elements:
            - top_row: player_top_row
            - gap: vgap
            - guts: player_guts
    layout:
        gap__margin: 5

player:         # width=389, height=514
    specializes: boxed
    placeholders:
        body:
            - full: player_full
    layout:
        color: (255, 130, 255)

player2_full:
    row:
        elements:
            - ch: channel
            - gap1: hgap
            - trans: transpose
            - gap2: hgap
            - ch_vol: channel_volume
    layout:
        y_align: '"S"'
        gap1__margin: 5
        gap2__margin: 5

player2:        # width=305, height=502
    specializes: boxed_titled
    placeholders:
        body:
            - full: player2_full
    layout:
        title: '"Player2"'
    appearance:
        color: (255, 130, 255)


note_row1:
    trace:
        - body
        - create_widget_args
       #- variable.init
    row:
        elements:
            - channel: note_channel
            - gap0: hgap
            - start: duration
            - gap1: hgap
            - duration: placeholder
            - gap2: hgap
            - velocity: velocity
    layout:
        y_align: '"S"'
        start__title: '"Start"'
        gap0__margin: 5
        gap1__margin: 5
        gap2__margin: 5
        cc_channel: None
        cc_param_offset: None
    computed:
        init:
            channel__cc_channel: cc_channel
            channel__cc_param: cc_param_offset + 0
            start__cc_channel: cc_channel
            start__cc_param: cc_param_offset + 1
            velocity__cc_channel: cc_channel
            velocity__cc_param: cc_param_offset + 3

note_base:           # width=379, height=502
    specializes: boxed_titled
    placeholders:
        body:
            - row1: note_row1
    layout:
        title: '"Note"'
        placeholders: None
        cc_channel: None
        cc_param_offset: None
    appearance:
        color: (255, 130, 255)
        # modified YELLOW: (253, 249, 140)
        # modified MAGENTA: (255, 130, 255)
    shortcuts:
        placeholders: row1__placeholders
        cc_channel: row1__cc_channel
        cc_param_offset: row1__cc_param_offset

note:                # width=379, height=502
    specializes: note_base
    placeholders:
        duration:
            - dur: duration
    layout:
        title: null
        cc_channel: null
        cc_param_offset: null
    computed:
        init:
            dur__cc_channel: cc_channel
            dur__cc_param: cc_param_offset + 2

grace_note:          # width=379, height=502
    specializes: note_base
    placeholders:
        duration:
            - dur: grace_duration
    layout:
        title: null
        cc_channel: null
        cc_param_offset: null
    computed:
        init:
            dur__cc_channel: cc_channel
            dur__cc_param: cc_param_offset + 2

accent_offset:
    specializes: slider
    layout:
        title: '"Delay"'
        starting_value: 36
        scale_fn: id            # [0-127]  clocks (0-5.3 qtr notes)
        tick: 10
    computed:
        init:
            command: ControlChange(3, 18)

trill_col1:
    column:
        elements:
            - accent: cycle_rect
            - gap: vgap
            - up_down: cycle_rect
            - gap: vgap
            - first: cycle_rect
            - gap: vgap
            - last: cycle_rect
    layout:
        gap__margin: 10
    computed:
        init:
            accent__choices:
                - "Accent \u03941"
               #- "Accent \u03942"
               #- Accent Δ1
                - Accent Δ2
            accent__cc_channel: 3
            accent__cc_param: 12
            up_down__choices:
                - Accent Up
                - Accent Down
            up_down__cc_channel: 3
            up_down__cc_param: 13
            first__choices:
                - Note First
                - Accent First
            first__cc_channel: 3
            first__cc_param: 14
            last__choices:
                - Note Last
                - Accent Last
            last__cc_channel: 3
            last__cc_param: 15

trill_rate:
    specializes: slider
    layout:
        title: '"Rate"'
        starting_value: 36
        scale_fn: id            # FIX: ??
    computed:
        init:
            command: ControlChange(3, 16)

trill_speed_up_down:
    specializes: slider
    layout:
        title: '"\u0394Rate"'
        starting_value: 36
        scale_fn: id            # FIX: ??
    computed:
        init:
            command: ControlChange(3, 17)

trill_guts:
    row:
        elements:
            - accent: trill_col1
            - gap1: hgap
            - rate: trill_rate
            - gap2: hgap
            - speed_up_down: trill_speed_up_down
    layout:
        gap1__margin: 2
        gap2__margin: 2

trill:          # width=300, height=502
    specializes: boxed_titled
    placeholders:
        body:
            - guts: trill_guts
    layout:
        title: '"Trill"'
    appearance:
        color: (255, 130, 255)

delay:
    specializes: slider
    layout:
        title: '"Delay"'
        starting_value: 36
        scale_fn: id            # [0-127]  clocks (0-5.3 qtr notes)
    computed:
        init:
            command: ControlChange(3, 18)

fermata:        # width=97, height=502
    specializes: boxed_titled
    placeholders:
        body:
            - clocks: delay
    layout:
        title: '"Fermata"'
    appearance:
        color: (255, 130, 255)
